AWSTemplateFormatVersion: '2010-09-09'
Description: Production Load Balancers for Prod_WAF
Parameters:
    VPCName:
        Type: 'AWS::EC2::VPC::Id'
        Description: 'Select A VPC to launch the Load Balancers in to '
    PublicSubnetA:
        Type: 'AWS::EC2::Subnet::Id'
        Description: Choose the public subnets to attach to the load balancers
    PublicSubnetB:
        Type: 'AWS::EC2::Subnet::Id'
        Description: Choose the public subnets to attach to the load balancers
    CustomerName:
        Type: String
        Description: Enter the name of the customer that this will be deployed for
Resources:
    ALBSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: 'Enable HTTP & HTTPS access via port 80 & 443'
            SecurityGroupIngress:
                - 
                    IpProtocol: tcp
                    FromPort: '80'
                    ToPort: '80'
                    CidrIp: 0.0.0.0/0
                - 
                    IpProtocol: tcp
                    FromPort: '443'
                    ToPort: '443'
                    CidrIp: 0.0.0.0/0
            VpcId:
                Ref: VPCName
            Tags:
                - 
                    Key: Name
                    Value:
                        Ref: CustomerName
    ApplicationLoadBalancer1:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            SecurityGroups:
                - 
                    Ref: ALBSecurityGroup
            Subnets:
              - Ref: PublicSubnetA
              - Ref: PublicSubnetB
            Tags:
                - 
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, ALB1 ] ]                       
    ALBListener1:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - 
                    Type: forward
                    TargetGroupArn:
                        Ref: ALBTargetGroup1
            LoadBalancerArn:
                Ref: ApplicationLoadBalancer1
            Port: '80'
            Protocol: HTTP
    ALBTargetGroup1:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            HealthCheckPath: /
            HealthCheckIntervalSeconds: 10
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Ref: VPCName
            TargetGroupAttributes:
                - 
                    Key: stickiness.enabled
                    Value: 'true'
                - 
                    Key: stickiness.type
                    Value: lb_cookie
                - 
                    Key: stickiness.lb_cookie.duration_seconds
                    Value: '30'
            Tags:
                -            
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, TargetGroup1 ] ]

    ApplicationLoadBalancer2:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            SecurityGroups:
                - 
                    Ref: ALBSecurityGroup
            Subnets:
              - Ref: PublicSubnetA
              - Ref: PublicSubnetB
            Tags:
                - 
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, ALB2 ] ]                       
    ALBListener2:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - 
                    Type: forward
                    TargetGroupArn:
                        Ref: ALBTargetGroup2
            LoadBalancerArn:
                Ref: ApplicationLoadBalancer2
            Port: '80'
            Protocol: HTTP
    ALBTargetGroup2:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            HealthCheckPath: /
            HealthCheckIntervalSeconds: 10
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Ref: VPCName
            TargetGroupAttributes:
                - 
                    Key: stickiness.enabled
                    Value: 'true'
                - 
                    Key: stickiness.type
                    Value: lb_cookie
                - 
                    Key: stickiness.lb_cookie.duration_seconds
                    Value: '30'
            Tags:
                -            
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, TargetGroup2 ] ]     
    
    ApplicationLoadBalancer3:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            SecurityGroups:
                - 
                    Ref: ALBSecurityGroup
            Subnets:
              - Ref: PublicSubnetA
              - Ref: PublicSubnetB
            Tags:
                - 
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, ALB3 ] ]                       
    ALBListener3:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - 
                    Type: forward
                    TargetGroupArn:
                        Ref: ALBTargetGroup3
            LoadBalancerArn:
                Ref: ApplicationLoadBalancer3
            Port: '80'
            Protocol: HTTP
    ALBTargetGroup3:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            HealthCheckPath: /
            HealthCheckIntervalSeconds: 10
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Ref: VPCName
            TargetGroupAttributes:
                - 
                    Key: stickiness.enabled
                    Value: 'true'
                - 
                    Key: stickiness.type
                    Value: lb_cookie
                - 
                    Key: stickiness.lb_cookie.duration_seconds
                    Value: '30'
            Tags:
                -            
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, TargetGroup3 ] ]  
    
    ApplicationLoadBalancer4:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            SecurityGroups:
                - 
                    Ref: ALBSecurityGroup
            Subnets:
              - Ref: PublicSubnetA
              - Ref: PublicSubnetB
            Tags:
                - 
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, ALB4 ] ]                       
    ALBListener4:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - 
                    Type: forward
                    TargetGroupArn:
                        Ref: ALBTargetGroup4
            LoadBalancerArn:
                Ref: ApplicationLoadBalancer4
            Port: '80'
            Protocol: HTTP
    ALBTargetGroup4:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            HealthCheckPath: /
            HealthCheckIntervalSeconds: 10
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Ref: VPCName
            TargetGroupAttributes:
                - 
                    Key: stickiness.enabled
                    Value: 'true'
                - 
                    Key: stickiness.type
                    Value: lb_cookie
                - 
                    Key: stickiness.lb_cookie.duration_seconds
                    Value: '30'
            Tags:
                -            
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, TargetGroup4 ] ]  

    ApplicationLoadBalancer5:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            SecurityGroups:
                - 
                    Ref: ALBSecurityGroup
            Subnets:
              - Ref: PublicSubnetA
              - Ref: PublicSubnetB
            Tags:
                - 
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, ALB5 ] ]                       
    ALBListener5:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - 
                    Type: forward
                    TargetGroupArn:
                        Ref: ALBTargetGroup5
            LoadBalancerArn:
                Ref: ApplicationLoadBalancer5
            Port: '80'
            Protocol: HTTP
    ALBTargetGroup5:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            HealthCheckPath: /
            HealthCheckIntervalSeconds: 10
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Ref: VPCName
            TargetGroupAttributes:
                - 
                    Key: stickiness.enabled
                    Value: 'true'
                - 
                    Key: stickiness.type
                    Value: lb_cookie
                - 
                    Key: stickiness.lb_cookie.duration_seconds
                    Value: '30'
            Tags:
                -            
                    Key: Name
                    Value: !Join [ "-", [ Ref: CustomerName, TargetGroup5 ] ]  
    